package mutators_test

import (
	"strings"
	"testing"

	"github.com/batmac/ccat/pkg/mutators"
)

func Test_mt(t *testing.T) {
	// mainly generated by GitHub Copilot, impressive!
	tests := []struct {
		name, input, mimetype string
	}{
		{"empty", "", "text/plain"},
		{"zero", "\x00", "application/octet-stream"},
		{"utf8 bom", "\xef\xbb\xbf", "text/plain; charset=utf-8"},
		{"utf16le bom", "\xff\xfe", "text/plain; charset=utf-16le"},
		{"utf16be bom", "\xfe\xff", "text/plain; charset=utf-16be"},
		{"utf32le bom", "\xff\xfe\x00\x00", "text/plain; charset=utf-32le"},
		{"utf32be bom", "\x00\x00\xfe\xff", "text/plain; charset=utf-32be"},
		{"gzip", "\x1f\x8b", "application/gzip"},
		{"bzip2", "BZh", "application/x-bzip2"},
		{"zip", "\x50\x4b\x03\x04", "application/zip"},
		{"jpg", "\xff\xd8\xff", "image/jpeg"},
		{"mp3", "ID3", "audio/mpeg"},
		{"rpm", "\xed\xab\xee\xdb", "application/x-rpm"},
		{"swf", "FWS", "application/x-shockwave-flash"},
		{"zstd", "\x28\xb5\x2f\xfd", "application/zstd"},
		{"webp", "RIFF....WEBPVP", "image/webp"},
	}
	f := "mimetype"
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := strings.Trim(mutators.Run(f, tt.input), "\n \r\t"); tt.mimetype != got {
				t.Errorf("%s = '%v', want %v", f, got, tt.mimetype)
			}
		})
	}
}
